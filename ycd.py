#!/usr/bin/env python
# -*- coding: utf-8 -*-

import math
import time
from youtube_transcript_api import YouTubeTranscriptApi
import argparse
import tkinter as tk
from tkinter import filedialog

root = tk.Tk()
root.withdraw()

ASS_HEADER = """[Script Info]
; Script generated by Aegisub 3.3.2
; http://www.aegisub.org/
Title: subtitles
ScriptType: v4.00+
PlayDepth: 0
YCbCr Matrix: TV.709
PlayResX: 1920
PlayResY: 1080

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding"""

styles = {
    "thai": "Style: Muse Default,BrowalliaUPC,110,&H00FFFFFF,&H000000FF,&H00020713,&H00000000,-1,0,0,0,100,100,0,0,1,3.5,0,2,75,75,45,1\n",
    "non-thai": "Style: Genshin Impact,SDK_SC_Web,60,&H00FFFFFF,&H0300FFFF,&H00000000,&H02000000,0,0,0,0,100,100,0,0,1,2,1,2,10,10,60,1\n"
}

LINE_HEADER = "[Events]\nFormat: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text"

def float_to_ass_time_format(d: float) -> str:
    """Convert decimal durations into proper ass format.
    
    :rtype: str
    :returns:
        Advanced SubStation Alpha Subtitle (str) formatted time duration.
    
    float_to_ass_time_format(3.89) -> '0:00:03.89'
    """
    fraction, whole = math.modf(d)
    time_fmt = time.strftime("%H:%M:%S.", time.gmtime(whole))
    ms = f"{fraction:.2f}".replace("0.", "")
    return time_fmt[1:] + ms

def float_to_srt_time_format(d: float) -> str:
    """Convert decimal durations into proper srt format.

    :rtype: str
    :returns:
        SubRip Subtitle (str) formatted time duration.

    float_to_srt_time_format(3.89) -> '00:00:03,890'
    """
    fraction, whole = math.modf(d)
    time_fmt = time.strftime("%H:%M:%S,", time.gmtime(whole))
    ms = f"{fraction:.3f}".replace("0.", "")
    return time_fmt + ms

def convert_to_ass(transcript: list, style: str) -> str:
    """Convert transcript to ass format.

    :param list transcript:
        Transcript list of dicts.
    """
    segments = [ASS_HEADER, styles[style], LINE_HEADER]
    for segment in transcript:
        start = segment['start']
        end = start + segment['duration']
        text = segment['text'].replace('  ', ' ')
        line = "Dialogue: 0,{start},{end},{style_name},,0,0,0,,{text}".format(
            start=float_to_ass_time_format(start),
            end=float_to_ass_time_format(end),
            style_name="Muse Default" if style == "thai" else "Genshin Impact",
            text=text,
        )
        segments.append(line)
    return "\n".join(segments).strip()

def convert_to_srt(transcript: list) -> str:
    """Convert transcript to srt format.

    :param list transcript:
        Transcript list of dicts.
    """
    segments = []
    for i, segment in enumerate(transcript):
        start = segment['start']
        end = start + segment['duration']
        text = segment['text'].replace('  ', ' ')
        sequence_number = i + 1  # convert from 0-indexed to 1.
        line = "{seq}\n{start} --> {end}\n{text}\n".format(
            seq=sequence_number,
            start=float_to_srt_time_format(start),
            end=float_to_srt_time_format(end),
            text=text,
        )
        segments.append(line)
    return "\n".join(segments).strip()

parser = argparse.ArgumentParser(description='Download subtitles from YouTube.')
parser.add_argument("-i", "--videoid", nargs="+", help="YouTube video ID (can input more than one)", required=True)
parser.add_argument("-f", "--format", help="Output subtitle format (default: srt)", type=str, default="srt", choices=["ass", "srt"])
parser.add_argument("-l", "--lang", help="Download subtitles in specified language (can input more than one)", nargs="+")
parser.add_argument("-p", "--prefix", help="Output subtitle prefix", type=str, required=True)
args = parser.parse_args()

output_dir = filedialog.askdirectory()

for vid in args.videoid:
    transcript_list = YouTubeTranscriptApi.list_transcripts(vid)
    langs = args.lang if args.lang else [transcript.language_code for transcript in transcript_list]

    for transcript in transcript_list:
        if not transcript.is_generated and transcript.language_code in langs:
            if args.format == "ass":
                with open(f'{output_dir}/{args.prefix}.{transcript.language_code}.ass', 'w', encoding='utf-8') as f:
                    f.write(convert_to_ass(transcript.fetch(), 'thai' if transcript.language_code == 'th' else 'non-thai'))
                print(f"Saved {output_dir}/{args.prefix}.{transcript.language_code}.ass")
            elif args.format == "srt":
                with open(f'{output_dir}/{args.prefix}.{transcript.language_code}.srt', 'w', encoding='utf-8') as f:
                    f.write(convert_to_srt(transcript.fetch()))
                print(f"Saved {output_dir}/{args.prefix}.{transcript.language_code}.srt")
            else:
                print("Invalid format.")
